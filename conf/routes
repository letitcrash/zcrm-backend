# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                                                                                     controllers.Application.index
  
# Setup Database 
GET     /setupdb                                                                              controllers.SetupDBController.setupDataBase

# Signup
POST    /signup                                                                               controllers.SignupController.sendSignupEmail
POST    /activate-user                                                                        controllers.SignupController.activateUserWithToken
#POST    /deactivate-user                                                                     controllers.SignupController.deactivateUser

# Password
POST    /users/:userId/password/recover                                                       controllers.UserController.setPasswordUsingToken(userId: Int)

# Logon
POST /login                                                                                   controllers.LoginController.login

# Companies
#GET     /companies                                                                            controllers.CompanyController.getAll
GET     /companies                                                                           controllers.CompanyController.searchAllCompaniesByName(pageSize: Option[Int], pageNr: Option[Int], searchTerm: Option[String])


GET     /companies/:companyId                                                                 controllers.CompanyController.get(companyId: Int)
GET     /companies/:companyId/expand                                                          controllers.CompanyController.getExpanded(companyId: Int)

# Delegate

POST	  /companies/:companyId/delegates                                                      controllers.DelegateController.newDelegate(companyId: Int)
POST	  /companies/:companyId/delegates/:delegateId/users/:userId                            controllers.DelegateController.addDelegateToUser(companyId: Int, delegateId: Int, userId: Int)
PUT	    /companies/:companyId/delegates/:delegateId                                          controllers.DelegateController.updateDelegate(companyId: Int, delegateId: Int)
DELETE	/companies/:companyId/delegates/:delegateId                                          controllers.DelegateController.deleteDelegateById(companyId: Int, delegateId: Int)
GET      /companies/:companyId/delegates                                                     controllers.DelegateController.searchAllDelegatesByName(companyId: Int, pageSize: Option[Int], pageNr: Option[Int], searchTerm: Option[String])
GET	    /companies/:companyId/delegates/:delegateId                                          controllers.DelegateController.getDelegate(companyId: Int, delegateId: Int)

# Shift 
POST    /companies/:companyId/shifts                                                         controllers.ShiftController.newShift(companyId: Int)                   
PUT     /companies/:companyId/shifts/:shiftId                                                controllers.ShiftController.updateShift(companyId: Int, shiftId: Int)
DELETE  /companies/:companyId/shifts/:shiftId                                                controllers.ShiftController.deleteShiftById(companyId: Int, shiftId: Int)
GET     /companies/:companyId/shifts                                                         controllers.ShiftController.searchAllShiftsByName(companyId: Int, pageSize: Option[Int], pageNr: Option[Int], searchTerm: Option[String])
GET     /companies/:companyId/shifts/:shiftId																								 controllers.ShiftController.getShift(companyId: Int, shiftId: Int) 

#Department 
POST    /companies/:companyId/departments																										 controllers.DepartmentController.newDepartment(companyId: Int)                 
PUT     /companies/:companyId/departments/:departmentId																			 controllers.DepartmentController.updateDepartment(companyId: Int, departmentId: Int)
DELETE  /companies/:companyId/departments/:departmentId																			 controllers.DepartmentController.deleteDepartmentById(companyId: Int, departmentId: Int)
GET     /companies/:companyId/departments                                                    controllers.DepartmentController.searchAllDepartmentsByName(companyId: Int, pageSize: Option[Int], pageNr: Option[Int], searchTerm: Option[String])
GET     /companies/:companyId/departments/:departmentId																			 controllers.DepartmentController.getDepartment(companyId: Int, departmentId: Int) 

#Union 
POST     /companies/:companyId/unions                                                        controllers.UnionController.newUnion(companyId: Int)                 
PUT      /companies/:companyId/unions/:unionId                                               controllers.UnionController.updateUnion(companyId: Int, unionId: Int)
DELETE   /companies/:companyId/unions/:unionId                                               controllers.UnionController.deleteUnionById(companyId: Int, unionId: Int) 
GET     /companies/:companyId/unions                                                         controllers.UnionController.searchAllUnionsByName(companyId: Int, pageSize: Option[Int], pageNr: Option[Int], searchTerm: Option[String])
GET      /companies/:companyId/unions/:unionId                                               controllers.UnionController.getUnion(companyId: Int, unionId: Int) 

#Team 
POST     /companies/:companyId/teams                                                         controllers.TeamController.newTeamWithMembers(companyId: Int)
POST     /companies/:companyId/teams/:teamId/users/:userId                                   controllers.TeamController.addUserToTeam(companyId: Int, teamId: Int, userId: Int)
PUT      /companies/:companyId/teams/:teamId                                                 controllers.TeamController.updateTeam(companyId: Int, teamId: Int) 
DELETE   /companies/:companyId/teams/:teamId                                                 controllers.TeamController.deleteTeamById(companyId: Int, teamId: Int) 
GET      /companies/:companyId/teams                                                         controllers.TeamController.searchAllTeamsByName(companyId: Int, pageSize: Option[Int], pageNr: Option[Int], searchTerm: Option[String])
GET      /companies/:companyId/teams/:teamId                                                 controllers.TeamController.getTeam(companyId: Int, teamId: Int)  

#Position
POST     /companies/:companyId/positions                                                     controllers.PositionController.postPosition(companyId: Int)
PUT      /companies/:companyId/positions/:positionId                                         controllers.PositionController.putPosition(companyId: Int, positionId: Int)
DELETE   /companies/:companyId/positions/:positionId                                         controllers.PositionController.deletePosition(companyId: Int, positionId: Int)
GET      /companies/:companyId/positions                                                     controllers.PositionController.searchAllPositionsByName(companyId: Int, pageSize: Option[Int], pageNr: Option[Int], searchTerm: Option[String])
GET      /companies/:companyId/positions/:positionId                                         controllers.PositionController.getPosition(companyId: Int, positionId: Int) 
 
#Project 
POST     /companies/:companyId/projects                                                      controllers.ProjectController.newProject(companyId: Int)
PUT      /companies/:companyId/projects/:projectId                                           controllers.ProjectController.updateProject(companyId: Int, projectId: Int) 
DELETE   /companies/:companyId/projects/:projectId                                           controllers.ProjectController.deleteProjectById(companyId: Int, projectId:Int) 
GET      /companies/:companyId/projects                                                      controllers.ProjectController.searchAllProjectsByName(companyId: Int, pageSize: Option[Int], pageNr: Option[Int], searchTerm: Option[String])
GET      /companies/:companyId/projects/:projectId                                           controllers.ProjectController.getProject(companyId: Int, projectId: Int)  

# Employees
POST    /companies/:companyId/employees                                                     controllers.EmployeeController.inviteEmployee(companyId: Int)

PUT     /companies/:companyId/employees/:employeeId                                         controllers.EmployeeController.updateEmployee(companyId: Int, employeeId: Int)
PUT     /companies/:companyId/employees/:employeeId/profile                                 controllers.EmployeeController.updateEmployeeContactProfile(companyId: Int, employeeId: Int)
PUT     /companies/:companyId/employees/:employeeId/positions/:positionId                   controllers.EmployeeController.updateEmployeePositionById(companyId: Int, employeeId: Int, positionId: Int)
PUT     /companies/:companyId/employees/:employeeId/unions/:unionId                         controllers.EmployeeController.updateEmployeeUnionById(companyId: Int, employeeId: Int, unionId: Int)
PUT     /companies/:companyId/employees/:employeeId/departments/:departmentId               controllers.EmployeeController.updateEmployeeDepartmentById(companyId: Int, employeeId: Int, departmentId: Int)
PUT     /companies/:companyId/employees/:employeeId/shifts/:shiftId                         controllers.EmployeeController.updateEmployeeShiftById(companyId: Int, employeeId: Int, shiftId: Int)
PUT     /companies/:companyId/employees/:employeeId/delegates                               controllers.EmployeeController.updateEmployeeDelegatesById(companyId: Int, employeeId: Int)
PUT     /companies/:companyId/employees/:employeeId/teams                                   controllers.EmployeeController.updateEmployeeTeamsById(companyId: Int, employeeId: Int)

DELETE  /companies/:companyId/employees/:employeeId                                         controllers.EmployeeController.softDeleteEmployee(companyId: Int, employeeId: Int)
DELETE  /companies/:companyId/employees/:employeeId/positions/:positionId                   controllers.EmployeeController.clearEmployeePositionById(companyId: Int, employeeId: Int, positionId: Int)
DELETE  /companies/:companyId/employees/:employeeId/unions/:unionId                         controllers.EmployeeController.clearEmployeeUnionById(companyId: Int, employeeId: Int, unionId: Int)
DELETE  /companies/:companyId/employees/:employeeId/departments/:departmentId               controllers.EmployeeController.clearEmployeeDepartmentById(companyId: Int, employeeId: Int, departmentId: Int)
DELETE  /companies/:companyId/employees/:employeeId/shifts/:shiftId                         controllers.EmployeeController.clearEmployeeShiftById(companyId: Int, employeeId: Int, shiftId: Int)
DELETE  /companies/:companyId/employees/:employeeId/delegates                               controllers.EmployeeController.clearEmployeeDelegatesById(companyId: Int, employeeId: Int)
DELETE  /companies/:companyId/employees/:employeeId/teams                                   controllers.EmployeeController.clearEmployeeTeamsById(companyId: Int, employeeId: Int)


GET     /companies/:companyId/employees/typeahead                                            controllers.EmployeeController.searchForTypeahead(companyId: Int, searchTerm: Option[String])
GET     /companies/:companyId/employees/:employeeId                                          controllers.EmployeeController.getEmployee(companyId: Int, employeeId: Int)
GET     /companies/:companyId/employees                                                      controllers.EmployeeController.searchAllEmployeesByCompanyId(companyId: Int, pageSize: Option[Int], pageNr: Option[Int], searchTerm: Option[String], positionIds: List[Int], shiftIds: List[Int], departmentIds: List[Int], unionIds:List[Int])

#Mailbox
POST   /users/:userId/mailboxes                                                              controllers.MailboxController.newMailbox(userId: Int)                   
PUT    /users/:userId/mailboxes/:mailboxId                                                   controllers.MailboxController.updateMailBox(userId: Int, mailboxId: Int)
DELETE /users/:userId/mailboxes/:mailboxId                                                   controllers.MailboxController.softDeleteMailbox(userId: Int, mailboxId: Int)
GET    /users/:userId/mailboxes/:mailboxId                                                   controllers.MailboxController.getMailboxById(userId: Int, mailboxId: Int)
GET     /users/:userId/mailboxes                                                             controllers.MailboxController.searchAllMailboxesByName(userId: Int, pageSize: Option[Int], pageNr: Option[Int], searchTerm: Option[String])

#Mail
GET    /users/:userId/mailboxes/:mailboxId/mails                                             controllers.ExchangeController.getODSMailsForMailboxGrouped(userId: Int, mailboxId: Int)
GET    /users/:userId/mailboxes/:mailboxId/mails/:mailId                                     controllers.ExchangeController.getMail(userId: Int, mailboxId: Int, mailId: Int)

#Tickets
POST   /companies/:companyId/tickets                                                         controllers.TicketController.newTicket(companyId: Int)
POST   /companies/:companyId/tickets/:ticketId/comments                                      controllers.TicketController.addCommentToTicket(companyId: Int, ticketId: Int)
POST   /companies/:companyId/tickets/:ticketId/mails/:mailId                                 controllers.TicketController.attachMailToTicket(companyId: Int, ticketId: Int, mailId: Int)
POST   /companies/:companyId/tickets/:ticketId/files/:fileId                                 controllers.TicketController.attachFileToTicket(companyId: Int, ticketId: Int, fileId: Int)
POST   /companies/:companyId/tickets/:ticketId/members                                       controllers.TicketController.addMembersToTicket(companyId: Int, ticketId: Int)
PUT    /companies/:companyId/tickets/:ticketId                                               controllers.TicketController.updateTicket(companyId: Int, ticketId: Int)
DELETE /companies/:companyId/tickets/:ticketId                                               controllers.TicketController.deleteTicketById(companyId: Int, ticketId:Int) 
DELETE /companies/:companyId/tickets/:ticketId/attachedmails/:attachedMailId                 controllers.TicketController.detachMailFromTicket(companyId: Int, ticketId: Int, attachedMailId: Int) 
DELETE /companies/:companyId/tickets/:ticketId/attachedfiles/:attachedFileId                 controllers.TicketController.detachFileFromTicket(companyId: Int, ticketId: Int, attachedFileId: Int)
GET    /companies/:companyId/tickets/:ticketId                                               controllers.TicketController.getTicket(companyId: Int, ticketId: Int)
GET    /companies/:companyId/tickets                                                         controllers.TicketController.searchAllTicketsByName(companyId: Int, pageSize: Option[Int], pageNr: Option[Int], searchTerm: Option[String])
GET    /companies/:companyId/tickets/:ticketId/actions                                       controllers.TicketController.getAllActionWithPagination(companyId: Int, ticketId: Int, actionTypes: List[Int], pageSize: Option[Int], pageNr: Option[Int], searchTerm: Option[String])

#File
POST   /users/:userId/files                                                                  controllers.FileController.uploadFile(userId: Int)
DELETE /users/:userId/files/:fileId                                                          controllers.FileController.deleteFile(userId: Int, fileId: Int)
GET    /users/:userId/files                                                                  controllers.FileController.searchAllFileesByName(userId: Int, pageSize: Option[Int], pageNr: Option[Int], searchTerm: Option[String])
GET    /users/:userId/files/:fileId                                                          controllers.FileController.getFile(userId: Int, fileId: Int)


# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path="/public", file: Asset)
